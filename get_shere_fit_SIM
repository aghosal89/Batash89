function [lc_fit fr_fit] = get_sphere_fit(Y, x, xout, h)

  n = length(x);
  lc_fit = zeros(3, length(xout));
  fr_fit = lc_fit;
  M = spherefactory(3);
  ops.verbosity = 0;
  fr.M = M; lc.M = M;

  % Get weights
  xdiff = repmat(x, 1, length(xout)) - repmat(xout, n, 1);
  Kmat = 0.75*(1 - (xdiff/h).^2).*(abs(xdiff)<= h);
  mu0 = mean(Kmat);  mu1 = mean(Kmat.*xdiff); mu2 = mean(Kmat.*(xdiff.^2));
  sig2 = mu0.*mu2 - mu1.^2;
  w = Kmat.*(repmat(mu2, n, 1) - repmat(mu1, n, 1).*xdiff)./repmat(sig2, n, 1);

  for j = 1:length(xout)

    y0 = sum(cell2mat(arrayfun(@(k) w(k, j)*Y(:, k), 1:n, 'UniformOutput', false))')'; y0 = y0/norm(y0); % Initial guess (extrinsic)

    % Compute cost and Euclidean gradient

    if(length(find(w(:, j))) < 2)

      fr_fit(:, j) = repmat(NaN, 1, 3);

    else

      fr.cost = @(y) get_cost(w(:, j)', Y, y, M);
      fr.egrad = @(y) get_egrad(w(:, j)', Y, y, M);
      fr.ehess = @(y, u) get_ehess(w(:, j)', Y, y, M, u);

      fr_fit(:, j) = trustregions(fr, y0, ops);

    end

    if(length(find(Kmat(:, j))) < 2)

      lc_fit(:, j) = repmat(NaN, 1, 3);

    else

      lc.cost = @(y) get_cost(Kmat(:, j)', Y, y, M);
      lc.egrad = @(y) get_egrad(Kmat(:, j)', Y, y, M);
      lc.ehess = @(y, u) get_ehess(Kmat(:, j)', Y, y, M, u);

      lc_fit(:, j) = trustregions(lc, y0, ops);

    end
    
  end

end
